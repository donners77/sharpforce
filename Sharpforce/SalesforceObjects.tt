<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Data.Entity.Design.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ include file="SalesforceObjects.ttinclude"#>
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using Newtonsoft.Json;


// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMember.Local

namespace Sharpforce
{
<#
    var path = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), @"Schema\SObjects.xml");
    SalesforceModel model = SalesforceModel.Create(path);
    foreach (SalesforceObject entity in model.SalesforceObjects)
    {
#>
    /// <summary>
    /// POCO for <#= entity.SalesforceName #>
    /// </summary>
    [DebuggerDisplay("Id={Id}; Name={Name}")]
    public partial class <#= entity.Name #>
    {
<#
        foreach(SalesforceProperty property in entity.Properties)
        {
#>
        /// <summary>
        /// <#= property.Label #> (<#= property.SalesforceType #> type in Salesforce)
        /// </summary>
<#
                        if (property.IsEditable && property.Type == "string" && property.Length!="0")
            {
#>
        [StringLength(<#= property.Length #>)]
<#
            }
                        if (!property.IsEditable)
            {
#>
        [JsonIgnore]
<#
            }
                        if (property.Label!=property.Name)
            {
#>
        [Display(Name = "<#= property.Label #>")]
<#
            }
#>
        public <#= property.Type #> <#= property.Name #> { get; <#=property.IsEditable ? "" : "private "#>set; }

<#
        }
#>
    }

<#
    }
#>
}

// ReSharper restore PartialTypeWithSinglePart
// ReSharper restore UnusedMember.Local

<#+
  // Insert any template procedures here
#>