<#@ template hostspecific="True" debug="True" #>
<#@ output extension="cs" #>
<#+ 

/// <summary>
/// Model for code generation
/// </summary>
public class SalesforceModel
{
    public List<SalesforceObject> SalesforceObjects { get; set; }

    /// <summary>
    /// Creates the Model for Salesfoce code generation
    /// </summary>
    public static SalesforceModel Create(string path)
    {
        System.Xml.Linq.XDocument xdoc = System.Xml.Linq.XDocument.Load(path);
        return new SalesforceModel
        {
            SalesforceObjects = xdoc.Descendants("sobjects").Select(x => new SalesforceObject(x)).ToList()
        };
    }

    public static List<string> GetPicklistValues(IEnumerable<XElement> elements)
    {
        return elements.Where(x => x.Element("active") != null && x.Element("active").Value == "true" && x.Element("value") != null)
            .Select(element => element.Element("value").Value).ToList();
    }

    public static string GetClrType(string type)
    {
        return type.Equals("boolean", StringComparison.InvariantCultureIgnoreCase) ? "bool?" : "string";
    }

    public static string GetClrName(string name)
    {
        return name;
    }

    public static string GetClrVariableName(string name)
    {
        string variableName = GetClrName(name);

        if (variableName.Length > 1)
        {
            variableName = variableName[0].ToString(CultureInfo.InvariantCulture).ToLowerInvariant() + variableName.Substring(1);
        }

        return variableName == "case" ? "value" : variableName;
    }
}

public class SalesforceObject
{
    public string SalesforceName { get; set; }
    public string Name { get; set; }
    public string CollectionName { get; set; }
    public string VariableName { get; set; }
    public string Url { get; set; }
    public string SObject { get; set; }
    public string Describe { get; set; }
    public string RowTemplate { get; set; }
    public List<SalesforceProperty> Properties { get; set; }

    public SalesforceObject(XElement x)
    {
        SalesforceName = x.Element("name") != null ? x.Element("name").Value : string.Empty;
        Name = SalesforceModel.GetClrName(SalesforceName);
        VariableName = SalesforceModel.GetClrVariableName(SalesforceName);
        var pluralizationService = PluralizationService.CreateService(new CultureInfo("en-US"));
        CollectionName = pluralizationService.Pluralize(Name);

        var urls = x.Element("urls");
        if (urls != null)
        {
            SObject = urls.Element("sobject") != null ? urls.Element("sobject").Value : string.Empty;
            Describe = urls.Element("describe") != null ? urls.Element("describe").Value : string.Empty;
            RowTemplate = urls.Element("rowTemplate") != null ? urls.Element("rowTemplate").Value : string.Empty;
        }

        Properties = (from p in x.Descendants("fields") select new SalesforceProperty(p, SalesforceName)).ToList();
    }
}

public class SalesforceProperty
{
    public string SalesforceName { get; set; }
    public string SalesforceType { get; set; }
    public string Name { get; set; }
    public string VariableName { get; set; }
    public string Description { get; set; }
    public string Type { get; set; }
    public string Label { get; set; }
    public string Length { get; set; }
    public bool IsCustom { get; set; }
    public bool IsEditable { get; set; }
    public bool IsExternalId { get; set; }
    public bool IsUnique { get; set; }
    public bool IsPicklist { get; set; }
    public bool IsReference { get; set; }
    public string ReferenceTo { get; set; }
    public List<string> PicklistValues { get; set; }

    public SalesforceProperty(XElement x, string objectName)
    {
        if (x == null) return;
        SalesforceName = x.Element("name") != null ? x.Element("name").Value : string.Empty;
        SalesforceType = x.Element("type") != null ? x.Element("type").Value : string.Empty;
        Name = SalesforceModel.GetClrName(SalesforceName);
        if (Name==objectName)
        {
            Name += "2";
        }
        Type = SalesforceModel.GetClrType(SalesforceType);
        Label = x.Element("label") != null ? x.Element("label").Value : string.Empty;
        Length = x.Element("length") != null ? x.Element("length").Value : string.Empty;
        IsEditable = (x.Element("updateable") != null && x.Element("updateable").Value == "true");
        IsCustom = (x.Element("custom") != null && x.Element("custom").Value == "true");
        IsExternalId = (x.Element("externalId") != null && x.Element("externalId").Value == "true");
        IsUnique = (x.Element("unique") != null && x.Element("unique").Value == "true");
        IsPicklist = (x.Element("type") != null && x.Element("type").Value == "picklist" || x.Element("type").Value == "multipicklist");
        IsReference = (x.Element("type")!= null && x.Element("type").Value == "reference");
        ReferenceTo = x.Element("referenceTo") != null ? x.Element("referenceTo").Value : string.Empty;
        PicklistValues = x.Elements("picklistValues") != null ? SalesforceModel.GetPicklistValues(x.Elements("picklistValues")) : new List<string>();
        if (IsReference && !Name.EndsWith("Id"))
        {
            VariableName = SalesforceModel.GetClrVariableName(Name + "Id");
        }
        else
        {
            VariableName = SalesforceModel.GetClrVariableName(Name);
        }

        // Sets the description
        Description = IsUnique ? "unique" : "non-unique";
        if (IsReference) Description += ", reference to " + ReferenceTo + " object";
        if (IsPicklist) Description += ", picklist";
    }
}

#>